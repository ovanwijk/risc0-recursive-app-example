
// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
// use methods::{
//     MERKLE_PROOF_ELF, MERKLE_PROOF_ID
// };
// use rayon::prelude::*;
use risc0_zkvm::{default_prover, sha::Digest, ExecutorEnv, ProverOpts, Receipt};
use methods::{RECURSIVE_COUNTER_ELF, RECURSIVE_COUNTER_ID};
use std::time::Instant;



fn forever_counter() -> u32 {

    let mut env = ExecutorEnv::builder()
        .write(&(&RECURSIVE_COUNTER_ID, 0u64))
        .unwrap()
        .build()
        .unwrap();

    let elf = RECURSIVE_COUNTER_ELF;

    let prover = default_prover();   
    let prover_opts: ProverOpts = ProverOpts::succinct();
    //let mut receipt = prover.prove(env, elf).unwrap().receipt;
    let mut receipt = prover.prove_with_opts(env, elf, &prover_opts).unwrap().receipt;
    //let _a = &receipt.claim().unwrap();
    
    let mut journal: ([u32;8], u64) = receipt.journal.decode().unwrap();
    
    let mut counter = 0;
    loop {
        let inner_succinkt = receipt.inner.succinct().unwrap();
    
        let start = Instant::now();
        env = ExecutorEnv::builder()        
        .add_assumption(receipt)
        .write(&(RECURSIVE_COUNTER_ID, journal.1))
        .unwrap()
        .build()
        .unwrap();
        // prover.prove_with_opts(env, elf, opts)
        receipt = prover.prove_with_opts(env, elf, &prover_opts).unwrap().receipt;
        //receipt = prover.prove(env, elf).unwrap().receipt;
        
        println!("Subtype of receipt_variable: {:?}", std::any::type_name_of_val(&receipt));
        //let claim = &receipt.claim().unwrap();
        journal = receipt.journal.decode().unwrap();
        
        receipt.verify(RECURSIVE_COUNTER_ID).unwrap();
        counter += 1;
        println!("RUN: {:?} - ZK value: {:?}", counter, journal.1);
        let duration = start.elapsed();
        println!("Time taken: {:?}", duration);
        if counter >= 257 {
            return 0;
        }
    }
}


fn main() {
    // std::env::set_var("RAYON_NUM_THREADS", "16");
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // An default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // For example:
   
    forever_counter();
    
    

    // extract the receipt.
    

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    
}
